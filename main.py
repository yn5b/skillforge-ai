import streamlit as st

st.set_page_config(page_title="Skilvyn Tutor", layout="wide")

SKILLS = ["Prompt Engineering"]

defaults = {
    "chat_history": [],
    "user_info": {},
    "skills": SKILLS,
    "selected_skill": None,
    "skill_level": None,
    "learning_path": [],
    "current_unit": 0,
    "unit_passed": False,
    "stage": "welcome"
}
for k, v in defaults.items():
    if k not in st.session_state:
        st.session_state[k] = v

def llama2_chat(messages, temperature=0.7, max_tokens=256):
    # Stub for Llama 2 7B chat
    for msg in reversed(messages):
        if msg["role"] == "user":
            return f"(LLAMA 2 7B STUB) {msg['content']}"
    return "(LLAMA 2 7B STUB) Hello!"

def assistant_reply(user_input=None):
    history = st.session_state.chat_history.copy()
    if user_input:
        history.append({"role": "user", "content": user_input})
    reply = llama2_chat(history)
    history.append({"role": "assistant", "content": reply})
    st.session_state.chat_history = history
    return reply

def show_chat():
    for msg in st.session_state.chat_history:
        if msg["role"] == "assistant":
            st.chat_message("assistant").markdown(msg["content"])
        else:
            st.chat_message("user").markdown(msg["content"])

# --------- App Flow Logic ---------

# Stage 1: Welcome
if st.session_state.stage == "welcome":
    if not st.session_state.chat_history:
        welcome = llama2_chat([
            {"role": "system", "content": "You are a friendly educational chatbot assistant. Speak English. Explain everything to the user, and clarify that all content is AI-generated."},
            {"role": "user", "content": "Welcome the user to Skilvyn, explain it is an interactive AI-powered learning platform. Make it clear that all content in this app is generated by AI."}
        ])
        st.session_state.chat_history.append({"role": "assistant", "content": welcome + "\nHow would you like me to call you?"})
    show_chat()
    user_input = st.chat_input("Enter your name or how you'd like to be addressed...")
    if user_input:
        st.session_state.user_info["name"] = user_input.strip()
        st.session_state.chat_history.append({"role": "user", "content": user_input})
        ask = llama2_chat([
            {"role": "system", "content": "You are a friendly educational chatbot assistant. Speak English."},
            {"role": "user", "content": f"The user said their name is {user_input}. Politely ask them for their email address."}
        ])
        st.session_state.chat_history.append({"role": "assistant", "content": ask})
        st.session_state.stage = "ask_info"
        st.stop()

# Stage 2: Collect personal information
elif st.session_state.stage == "ask_info":
    show_chat()
    user_input = st.chat_input("Enter your email address...")
    if user_input:
        st.session_state.user_info["email"] = user_input.strip()
        st.session_state.chat_history.append({"role": "user", "content": user_input})
        ask = llama2_chat([
            {"role": "system", "content": "You are a friendly educational chatbot assistant. Speak English."},
            {"role": "user", "content": "Ask the user for their date of birth (format: YYYY-MM-DD) in a concise and polite way."}
        ])
        st.session_state.chat_history.append({"role": "assistant", "content": ask})
        st.session_state.stage = "choose_skill"
        st.stop()

# Stage 3: Skill selection (only one skill, with AI-generated message)
elif st.session_state.stage == "choose_skill":
    show_chat()
    user_input = st.chat_input("Enter your date of birth (e.g., 1990-01-01)...")
    if user_input:
        st.session_state.user_info["birth"] = user_input.strip()
        st.session_state.chat_history.append({"role": "user", "content": user_input})
        skills_message = llama2_chat([
            {"role": "system", "content": "You are a friendly educational chatbot assistant. Speak English."},
            {"role": "user", "content": "Tell the user that currently only 'Prompt Engineering' is available to learn, and more skills will be added soon. Ask them to confirm if they want to start learning Prompt Engineering."}
        ])
        st.session_state.chat_history.append({"role": "assistant", "content": skills_message})
        st.session_state.stage = "ask_level"
        st.stop()

# Stage 4: Confirm learning and ask for skill level
elif st.session_state.stage == "ask_level":
    show_chat()
    user_input = st.chat_input("Would you like to learn Prompt Engineering? (yes/no)...")
    if user_input and "yes" in user_input.strip().lower():
        st.session_state.selected_skill = "Prompt Engineering"
        st.session_state.chat_history.append({"role": "user", "content": user_input})
        ask = llama2_chat([
            {"role": "system", "content": "You are a friendly educational chatbot assistant. Speak English."},
            {"role": "user", "content": "Ask the user to briefly describe their current experience level in Prompt Engineering (beginner/intermediate/advanced or a short sentence about themselves)."}
        ])
        st.session_state.chat_history.append({"role": "assistant", "content": ask})
        st.session_state.stage = "generate_path"
        st.stop()
    elif user_input:
        st.session_state.chat_history.append({"role": "user", "content": user_input})
        sorry = llama2_chat([
            {"role": "system", "content": "You are a friendly educational chatbot assistant. Speak English."},
            {"role": "user", "content": "Thank the user and let them know they can return later when more skills are added."}
        ])
        st.session_state.chat_history.append({"role": "assistant", "content": sorry})
        st.stop()

# Stage 5: Generate the learning path using AI
elif st.session_state.stage == "generate_path":
    show_chat()
    user_input = st.chat_input("Describe your current experience...")
    if user_input:
        st.session_state.skill_level = user_input.strip()
        st.session_state.chat_history.append({"role": "user", "content": user_input})
        prompt = (
            f"You are an AI learning assistant for a student named {st.session_state.user_info['name']} who wants to learn Prompt Engineering. "
            f"Their experience: {st.session_state.skill_level}. Create a plan with 5 units, each with a short title, a learning objective, and a welcome message for the unit. "
            "Return the list as JSON with objects containing: title, objective, welcome."
        )
        plan = llama2_chat([{"role": "system", "content": prompt}], temperature=0.5, max_tokens=512)
        import json
        try:
            learning_path = json.loads(plan)
            st.session_state.learning_path = learning_path
            st.session_state.current_unit = 0
            st.session_state.stage = "in_unit"
            msg = llama2_chat([
                {"role": "system", "content": "You are a friendly educational chatbot assistant. Speak English."},
                {"role": "user", "content": f"Welcome the user and inform them they are starting with the first unit: {learning_path[0]['title']}. Show the unit's welcome message."}
            ])
            msg += f"\n\n{learning_path[0]['welcome']}"
            st.session_state.chat_history.append({"role": "assistant", "content": msg})
            st.stop()
        except Exception:
            st.session_state.chat_history.append({"role": "assistant", "content": "An error occurred while generating your learning path. Please try again."})
            st.stop()

# Stage 6: Inside the learning unit (chat)
elif st.session_state.stage == "in_unit":
    unit = st.session_state.learning_path[st.session_state.current_unit]
    show_chat()
    user_input = st.chat_input("Ask or answer via chat...")
    if user_input:
        st.session_state.chat_history.append({"role": "user", "content": user_input})
        tutor_prompt = [
            {"role": "system", "content": (
                f"You are a smart tutor. The unit: {unit['title']}. Unit objective: {unit['objective']}."
                " Evaluate the student's answer and respond. At the end, on a separate line, add: [status:pass] if ready for the next unit, or [status:stay] if not ready."
            )},
        ] + st.session_state.chat_history[-6:]
        reply = llama2_chat(tutor_prompt)
        st.session_state.chat_history.append({"role": "assistant", "content": reply})
        if "[status:pass]" in reply:
            if st.session_state.current_unit + 1 < len(st.session_state.learning_path):
                st.session_state.current_unit += 1
                next_unit = st.session_state.learning_path[st.session_state.current_unit]
                msg = llama2_chat([
                    {"role": "system", "content": "You are a friendly educational chatbot assistant. Speak English."},
                    {"role": "user", "content": f"Let the user know they've moved to the next unit titled: {next_unit['title']}. Show the unit's welcome message."}
                ])
                msg += f"\n\n{next_unit['welcome']}"
                st.session_state.chat_history.append({"role": "assistant", "content": msg})
                st.stop()
            else:
                st.session_state.stage = "path_complete"
                st.session_state.chat_history.append({"role": "assistant", "content": "ðŸŽ‰ Congratulations! You have completed all units successfully."})
                st.stop()
        elif "[status:stay]" in reply:
            encourage = llama2_chat([
                {"role": "system", "content": "You are a friendly educational chatbot assistant. Speak English."},
                {"role": "user", "content": "Encourage the user to keep working on this unit until they're ready to move on."}
            ])
            st.session_state.chat_history.append({"role": "assistant", "content": encourage})
            st.stop()

# Stage 7: Path complete
elif st.session_state.stage == "path_complete":
    show_chat()
    st.success("You have completed the program! You can start over or review your units.")
    if st.button("Start Over"):
        for k in ("chat_history", "user_info", "selected_skill", "skill_level", "learning_path", "current_unit", "stage"):
            st.session_state[k] = defaults[k]
        st.stop()
